<?php 
namespace DAL\Helpers;
    /** 
    * Feedback class. Is required for all BLL classes that 
    * are generated by An Orm Apart. 
    * @lastmodified 30/08/2014 
    * @since 01/06/2013            
    * @author Entreprise de Modes et de Manieres Modernes - e3M        
    * @version 0.1 
    */     
class Feedback 
{ 
    // design bestaat erin de data te identificeren 
    // en de methoden 
    // enkelvoudige variabelen 
    protected $text; 
    protected $errorMessage; 
    protected $errorCode; 
    protected $errorCodeDriver; // for SQL or other provider code 
    protected $isError; 
    protected $name; 
    protected $startTime; 
    protected $endTime; 
    protected $context; 
  
    // constructor wordt uitgevoerd met 
    // het new keyword 
    public function __construct() 
    { 
        $this->Start('none'); 
    } 
  
    public function getText() 
    { 
        return $this->text; 
    } 
  
    public function getErrorMessage() 
    { 
        return $this->errorMessage; 
    } 
  
    public function getErrorCode() 
    { 
        return $this->errorCode; 
    } 
  
    public function getErrorCodeDriver() 
    { 
        return $this->errorCodeDriver; 
    } 
  
    public function getIsError() 
    { 
        return $this->isError; 
    } 
  
    public function getName() 
    { 
        return $this->name; 
    } 
  
    public function getStartTime() 
    { 
        return $this->startTime; 
    } 
  
    public function getEndTime() 
    { 
        return $this->endTime; 
    } 
  
    public function getContext() 
    { 
        return $this->context; 
    } 
  
    public function setText($value) 
    { 
        $this->text = $value; 
    } 
  
    public function setErrorMessage($value) 
    { 
        $this->errorMessage = $value; 
    } 
  
    public function setErrorCode($value) 
    { 
        $this->errorCode = $value; 
    } 
  
    public function setErrorCodeDriver($value) 
    { 
        $this->errorCodeDriver = $value; 
    } 
  
    public function setIsError($value) 
    { 
        $this->isError = $value; 
    } 
  
    public function setName($value) 
    { 
        $this->name = strtoupper($value); 
    } 
  
    public function setStartTime() 
    { 
        // if new name and not 'none' then we know it is the start of a new process 
        if ($this->name == 'NONE') 
        { 
            $this->startTime = '00:00'; 
        } 
        else 
        { 
            $this->startTime = date("Y-m-d H:i:s"); 
        } 
    } 
  
    public function setEndTime() 
    { 
        // if new name and not 'none' then we know it is the start of a new process 
        if ($this->name == 'NONE') 
        { 
            $this->endTime = '00:00'; 
        } 
        else 
        { 
            $this->endTime = date("Y-m-d H:i:s"); 
        } 
    } 
  
    public function setContext($value) 
    { 
        $this->context = $value; 
    } 
  
    public function copy() 
    { 
        $feedbackObject = new Feedback(); 
        $feedbackObject->setText($this->text); 
        $feedbackObject->setErrorMessage($this->errorMessage); 
        $feedbackObject->setErrorCode($this->errorCode); 
        $feedbackObject->setErrorCodeDriver($this->errorCodeDriver); 
        $feedbackObject->setIsError($this->isError); 
        $feedbackObject->setName($this->name); 
        $feedbackObject->setStartTime($this->startTime); 
        $feedbackObject->setEndTime($this->endTime); 
        $feedbackObject->setContext($this->context); 
        return $feedbackObject; 
    } 
  
    // takes the name and timestamp for key 
    public function startTimeInKey($name)
    {

    $name = $name . ' ' . date("Y-m-d H:i:s");
    $this->start($name);
    }

    public function reset()
    {
        $this->text = '';
        $this->errorMessage = '';
        $this->errorCode = '';
        $this->errorCodeDriver = '';
        $this->isError = '';
        $this->name = '';
        $this->startTime = '';
        $this->endTime = '';
        $this->context = '';
    }
                 
    //takes only the name as key 
    public function start($name) 
    { 
        $this->setName($name); 
        $this->setStartTime(); 
        $this->endTime = '00:00'; 
        $this->feedback = 'none'; 
        $this->errorMessage = 'none'; 
        $this->errorCode = 'none'; 
        $this->errorCodeDriver = 'none'; 
        $this->isError = FALSE; 
        $this->messages = array(); 
        $this->context = 'none'; 
    } 
  
    public function end() 
    { 
        $this->setEndTime(); 
        return $this->copy(); 
    } 
}

